{"version":3,"sources":["component/Navbar/Navbar.jsx","utils/API.js","component/Table/Table.jsx","App.js","serviceWorker.js","index.js"],"names":["Navbar","Fragment","className","API","getUsers","res","axios","get","Table","useState","inputState","setInput","search","setSearch","id","picture","name","phone","email","dob","users","setUsers","order","orderState","setOrderState","useEffect","then","data","results","allUsers","map","user","indexOf","medium","first","last","date","slice","console","log","handleSort","value","sort","a","b","HandleTable","length","key","src","alt","style","height","width","type","placeholder","onChange","event","input","preventDefault","Input","toLowerCase","filterInput","filter","item","substring","handleUserSearch","target","scope","onClick","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"+PAgCeA,MA7Bf,WAGI,OACI,kBAAC,IAAMC,SAAP,KACI,gCACI,yBAAKC,UAAU,8CACX,yBAAKA,UAAU,gBACX,yBAAKA,UAAU,eACX,yBAAKA,UAAU,qCACX,yBAAKA,UAAU,oCACX,yBAAKA,UAAU,uCACX,6BACA,kDACA,mHACA,sC,+CCTzBC,EAPH,CAEVC,SAAU,SAAUC,GAClB,OAAOC,IAAMC,IAAI,mDC6INC,MA9If,WAAkB,IAAD,EAEgBC,mBAAS,IAFzB,mBAERC,EAFQ,KAEIC,EAFJ,OAIaF,mBAAS,IAJtB,mBAIRG,EAJQ,KAIAC,EAJA,OAMWJ,mBAAS,CACjC,CACEK,GAAI,GACJC,QAAS,GACTC,KAAM,GACNC,MAAO,GACPC,MAAO,GACPC,IAAK,MAbM,mBAMRC,EANQ,KAMDC,EANC,OAkBqBZ,mBAAS,CAAEa,MAAO,QAlBvC,mBAkBRC,EAlBQ,KAkBIC,EAlBJ,KAoBfC,qBAAU,WAERtB,EAAIC,WAAWsB,MAAK,SAACrB,GAEnB,IAAMsB,EAAOtB,EAAIsB,KAAKC,QAChBC,EAAWF,EAAKG,KAAI,SAACC,GAEzB,MAAQ,CACNjB,GAAIa,EAAKK,QAAQD,GACjBhB,QAASgB,EAAKhB,QAAQkB,OACtBjB,KAAMe,EAAKf,KAAKkB,MAAQ,IAAMH,EAAKf,KAAKmB,KACxClB,MAAOc,EAAKd,MACZC,MAAOa,EAAKb,MACZC,IAAKY,EAAKZ,IAAIiB,KAAKC,MAAM,EAAG,QAIhCC,QAAQC,IAAI,sCAAuCV,GACnDR,EAASQ,QAIV,IAEH,IAAMW,EAAa,SAACC,GAEO,QAArBlB,EAAWD,OACFF,EAAMsB,MAAK,SAAUC,EAAGC,GACjC,OAAID,EAAEF,GAASG,EAAEH,IAAkB,EAC/BE,EAAEF,GAASG,EAAEH,GAAiB,EAC3B,KAETjB,EAAc,eAAKD,EAAN,CAAkBD,MAAO,WAE3BF,EAAMsB,MAAK,SAAUC,EAAGC,GAEjC,OAAID,EAAEF,GAASG,EAAEH,IAAkB,EAC/BE,EAAEF,GAASG,EAAEH,GAAiB,EAC3B,KAETjB,EAAc,eAAKD,EAAN,CAAkBD,MAAO,UAExCD,EAAS,YAAID,KAefkB,QAAQC,IAAI,UAAW3B,GACvB0B,QAAQC,IAAI,SAAUnB,GAStB,IAAIyB,GARkB,IAAlBjC,EAAOkC,QAAgBpC,EAAWoC,OAAS,EAChC,GACJlC,EAAOkC,OAAS,EACZlC,EAEAQ,GAGcU,KAAI,SAACC,GAAD,OAE/B,wBAAIgB,IAAKhB,EAAKjB,IACZ,4BAAK,yBAAKkC,IAAKjB,EAAKhB,QAASkC,IAAI,MAAM/C,UAAU,iBAAiBgD,MAAO,CAAEC,OAAQ,GAAIC,MAAO,OAC9F,4BAAKrB,EAAKf,MACV,4BAAKe,EAAKd,OACV,4BAAKc,EAAKb,OACV,4BAAKa,EAAKZ,SAOd,OADAmB,QAAQC,IAAI,6BAA8BnB,GAExC,kBAAC,IAAMnB,SAAP,KAGE,yBAAKC,UAAU,+CACb,yBAAKA,UAAU,aACf,yBAAKA,UAAU,kBACb,yCACA,yBAAKA,UAAU,gBACb,2BAAOmD,KAAK,OACVnD,UAAU,oDACVc,KAAK,SACLsC,YAAY,2BACZC,SAAU,SAACC,GAAD,OAhDG,SAACA,EAAOC,GAC/BD,EAAME,iBACN,IAAMC,EAAQF,EAAMG,cACdC,EAAczC,EAAM0C,QAAO,SAAAC,GAC/B,OAAOA,EAAK/C,KAAKgD,UAAU,EAAGL,EAAMb,QAAQc,gBAAkBD,KAEhEhD,EAASgD,GACT9C,EAAUgD,GAyCqBI,CAAiBT,EAAOA,EAAMU,OAAOzB,aAOlE,2BAAOvC,UAAU,kCACf,+BACE,4BACE,wBAAIiE,MAAM,MAAMjE,UAAU,IAA1B,SAAmC,gCACnC,wBAAIiE,MAAM,MAAMjE,UAAU,IAA1B,QAAkC,0BAAMc,KAAK,OAAOd,UAAU,mBAAmBkE,QAAS,SAAAZ,GAAWhB,EAAW,YAChH,wBAAI2B,MAAM,MAAMjE,UAAU,IAA1B,SAAmC,0BAAMc,KAAK,QAAQd,UAAU,mBAAmBkE,QAAS,SAAAZ,GAAWhB,EAAW,aAClH,wBAAI2B,MAAM,MAAMjE,UAAU,IAA1B,SAAmC,0BAAMc,KAAK,QAAQd,UAAU,mBAAmBkE,QAAS,SAAAZ,GAAWhB,EAAW,aAClH,wBAAI2B,MAAM,MAAMjE,UAAU,IAA1B,OAAiC,0BAAMc,KAAK,MAAMd,UAAU,mBAAmBkE,QAAS,SAAAZ,GAAWhB,EAAW,aAIlH,+BACE,kBAAC,IAAMvC,SAAP,KACG4C,OClHEwB,MAff,WAIE,OACE,kBAAC,IAAMpE,SAAP,KACE,kBAAC,EAAD,MACA,yBAAKC,UAAU,aACf,kBAAC,EAAD,SCLcoE,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBvD,MAAK,SAAAwD,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACL/C,QAAQ+C,MAAMA,EAAMC,c","file":"static/js/main.adb2cf96.chunk.js","sourcesContent":["import React from 'react';\r\nimport \"../Navbar/style.css\";\r\n\r\nfunction Navbar() {\r\n\r\n\r\n    return (\r\n        <React.Fragment>\r\n            <header>\r\n                <nav className=\"navbar-expand-lg navbar-dark indigo col-12\">\r\n                    <div className=\"view intro-2\">\r\n                        <div className=\"full-bg-img\">\r\n                            <div className=\"mask rgba-black-light flex-center\">\r\n                                <div className=\"container text-center white-text\">\r\n                                    <div className=\"white-text text-center wow fadeInUp\">\r\n                                        <br />\r\n                                        <h1>Employee Directory</h1>\r\n                                        <h5>Click on carrots to filter by heading or use the search box to narrow your result .</h5>\r\n                                        <br />\r\n\r\n                                    </div>\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </nav>\r\n            </header>\r\n\r\n        </React.Fragment>\r\n    )\r\n}\r\n\r\nexport default Navbar;","import axios from \"axios\";\r\n\r\nconst API = {\r\n\r\n  getUsers: function (res) {\r\n    return axios.get(\"https://randomuser.me/api/?results=200&nat=us\")\r\n  }\r\n}\r\n\r\nexport default API;\r\n","import React, { useState, useEffect } from \"react\";\nimport '../Table/style.css'\nimport API from '../../utils/API';\n\nfunction Table() {\n\n  const [inputState, setInput] = useState('')\n\n  const [search, setSearch] = useState([]);\n\n  const [users, setUsers] = useState([\n    {\n      id: \"\",\n      picture: \"\",\n      name: \"\",\n      phone: \"\",\n      email: \"\",\n      dob: \"\",\n\n    }]);\n\n\n  const [orderState, setOrderState] = useState({ order: \"asc\" });\n\n  useEffect(() => {\n\n    API.getUsers().then((res) => {\n\n      const data = res.data.results;\n      const allUsers = data.map((user) => {\n\n        return ({\n          id: data.indexOf(user),\n          picture: user.picture.medium,\n          name: user.name.first + \" \" + user.name.last,\n          phone: user.phone,\n          email: user.email,\n          dob: user.dob.date.slice(0, 10),\n\n        })\n      });\n      console.log('this is all users on first update!!', allUsers)\n      setUsers(allUsers);\n    });\n\n\n  }, []);\n\n  const handleSort = (value) => {\n    let newOrder;\n    if (orderState.order === \"asc\") {\n      newOrder = users.sort(function (a, b) {\n        if (a[value] < b[value]) { return -1; }\n        if (a[value] > b[value]) { return 1; }\n        return 0;\n      })\n      setOrderState({ ...orderState, order: \"dsc\" });\n    } else {\n      newOrder = users.sort(function (a, b) {\n\n        if (a[value] > b[value]) { return -1; }\n        if (a[value] < b[value]) { return 1; }\n        return 0;\n      })\n      setOrderState({ ...orderState, order: \"asc\" });\n    }\n    setUsers([...users]);\n  };\n\n\n  const handleUserSearch = (event, input) => {\n    event.preventDefault();\n    const Input = input.toLowerCase();\n    const filterInput = users.filter(item => {\n      return item.name.substring(0, Input.length).toLowerCase() === Input;\n    });\n    setInput(Input)\n    setSearch(filterInput);\n  }\n\n  let usersTohow\n  console.log(\"Search \", search)\n  console.log(\"users \", users)\n  if (search.length === 0 && inputState.length > 0) {\n    usersTohow = []\n  } else if (search.length > 0) {\n    usersTohow = search\n  } else {\n    usersTohow = users\n  }\n\n  let HandleTable = usersTohow.map((user) => (\n\n    <tr key={user.id} >\n      <td ><img src={user.picture} alt=\"img\" className=\"rounded-circle\" style={{ height: 70, width: 70 }} /></td>\n      <td>{user.name}</td>\n      <td>{user.phone}</td>\n      <td>{user.email}</td>\n      <td>{user.dob}</td>\n    </tr>\n\n  ))\n\n\n  console.log('Thos is the users state!!!', users)\n  return (\n    <React.Fragment>\n      {/* <form> */}\n\n      <div className=\"form-row search-wrapper col-md-12 col-sm-12\">\n        <div className=\"col-md-6\"></div>\n        <div className=\"col-md-6 mb-3 \">\n          <label>Search</label>\n          <div className=\"input-group \">\n            <input type=\"text\"\n              className=\"form-control shadow-lg p-3 mb-5 bg-white rounded \"\n              name=\"search\"\n              placeholder=\"Search By users Name ...\"\n              onChange={(event) => handleUserSearch(event, event.target.value)} />\n          </div>\n        </div>\n      </div>\n\n      {/* </form> */}\n\n      <table className=\"table table-striped table-dark\">\n        <thead >\n          <tr>\n            <th scope=\"col\" className=\"\">Image <span></span></th>\n            <th scope=\"col\" className=\"\">Name <span name=\"name\" className=\"fas fa-sort ml-1\" onClick={event => { handleSort(\"name\") }}></span></th>\n            <th scope=\"col\" className=\"\">Phone <span name=\"phone\" className=\"fas fa-sort ml-1\" onClick={event => { handleSort(\"phone\") }}></span></th>\n            <th scope=\"col\" className=\"\">Email <span name=\"email\" className=\"fas fa-sort ml-1\" onClick={event => { handleSort(\"email\") }}></span></th>\n            <th scope=\"col\" className=\"\">DBO <span name=\"dbo\" className=\"fas fa-sort ml-1\" onClick={event => { handleSort(\"dbo\") }}></span></th>\n          </tr>\n\n        </thead>\n        <tbody>\n          <React.Fragment>\n            {HandleTable}\n          </React.Fragment>\n        </tbody>\n      </table>\n    </React.Fragment>\n  )\n}\n\nexport default Table;","import React from \"react\";\nimport Navbar from './component/Navbar/Navbar';\n// import SearchForm from './component/SearchBar/Search';\n\nimport Table from './component/Table/Table';\n// import API from './utils/API';\n\n\n\nfunction App() {\n  // const [error, setError] = useState(\"\");\n  \n\n  return (\n    <React.Fragment>\n      <Navbar />\n      <div className=\"container\">\n      <Table/> \n    </div>\n\n    </React.Fragment>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}